{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Persons","props","persons","filter","person","name","toLowerCase","includes","map","key","number","onClick","event","removePerson","Filter","onChange","handleFilterChange","PersonForm","onSubmit","newName","newNumber","handleNameChange","handleNumberChange","value","type","Notification","message","className","ErrorNotification","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","useEffect","personService","then","response","data","target","preventDefault","some","window","confirm","personCopy","find","copy","findIndex","setTimeout","catch","push","error","splice","indexOf","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9040c4b5.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = id => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default {\r\n  getAll: getAll,\r\n  create: create,\r\n  update: update,\r\n  remove: remove\r\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './App.css'\nconst Persons = (props) => {\n  return(\n    props.persons.filter(function (person) { return person.name.toLowerCase().includes(props.filter.toLowerCase())}).map(person =>\n      <p key={person.name}>{person.name} {person.number} <button onClick ={(event) => props.removePerson(event,person)}>delete</button></p>\n    )\n  )\n}\n\nconst Filter = (props) => {\n\n  return (\n    <div>filter shown with <input  onChange={props.handleFilterChange} /></div>\n  )\n\n}\nconst PersonForm = (props) =>  {\n  const { onSubmit,newName,newNumber,handleNameChange,handleNumberChange } = props\n  return (\n    <form onSubmit ={onSubmit}>\n      <div> name: <input value ={newName} onChange ={handleNameChange}/> </div>\n      <div> number: <input value ={newNumber} onChange= {handleNumberChange}/></div>\n      <div><button type=\"submit\">add</button></div>\n    </form>\n  )\n\n\n}\n\nconst Notification = ( { message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nconst ErrorNotification = ({ message } ) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName ] = useState(\"\")\n  const [newNumber,setNewNumber] = useState(\"\")\n  const [filter, setNewFilter] = useState(\"\")\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const removePerson = (event,person) => {\n    event.preventDefault()\n    if(window.confirm(\"Delete \"+person.name+\" ?\")){\n      const copy = [...persons]\n      personService\n        .remove(person.id)\n        .then(() =>\n        {\n          copy.splice(copy.indexOf(person), 1)\n          setPersons(copy)\n\n          setNotificationMessage(person.name+ \" was removed\")\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 3000)\n        })\n    }\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const onSubmit = event => {\n    event.preventDefault()\n    if(!persons.some(person => person.name === newName)){\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObject)\n        .then(response => {\n          const copy = [...persons]\n          copy.push(response.data)\n          setPersons(copy)\n          setNotificationMessage(newName+ \" was added\")\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 3000)\n        })\n        .catch(error => {\n          setErrorMessage(error.response.data.error)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000)\n\n        })\n    } else {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with new one?`)){\n        const personCopy = { ...persons.find(person => person.name === newName) }\n        personCopy.number = newNumber\n        personService\n          .update(personCopy.id,personCopy)\n          .then(response => {\n            const copy = [...persons]\n            copy[copy.findIndex(person => person.id===response.data.id)] = response.data\n            setPersons(copy)\n            setNotificationMessage(personCopy.name+ \"'s number was changed\")\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 3000)\n          })\n          .catch(() => {\n            setErrorMessage(\"Error when updating \"+personCopy.name+\" number\")\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 3000)\n          })\n      }\n\n    }\n    setNewName(\"\")\n    setNewNumber(\"\")\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter filter= {filter} handleFilterChange ={handleFilterChange}/>\n      <Notification message={notificationMessage} />\n      <ErrorNotification message={errorMessage} />\n      <h2>add a new</h2>\n      <PersonForm handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newNumber = {newNumber}\n        newName = {newName}\n        onSubmit ={onSubmit}/>\n      <h2>Numbers</h2>\n      <Persons persons ={persons} filter ={filter} removePerson={removePerson} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}